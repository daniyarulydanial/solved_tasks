"""Напишите функцию update_dictionary(d, key, value), которая принимает на вход словарь dd и два числа: keykey и valuevalue.
Если ключ keykey есть в словаре dd, то добавьте значение valuevalue в список, который хранится по этому ключу.
Если ключа keykey нет в словаре, то нужно добавить значение в список по ключу 2 * key2∗key. 
Если и ключа 2 * key2∗key нет, то нужно добавить ключ 2 * key2∗key в словарь и сопоставить ему список из переданного элемента [value][value].
Требуется реализовать только эту функцию, кода вне её не должно быть.
Функция не должна вызывать внутри себя функции input и print."""

# не добавляйте кода вне функции
def update_dictionary(d, key, value):
  if key in d.keys():
    d[key] += [value]
  else:
    if 2*key in d.keys():
      d[2*key] += [value]
    else:
      d[2*key] = [value]

"""Когда Антон прочитал «Войну и мир», ему стало интересно, сколько слов и в каком количестве используется в этой книге.
Помогите Антону написать упрощённую версию такой программы, которая сможет подсчитать слова, разделённые пробелом и вывести получившуюся статистику.
Программа должна считывать одну строку со стандартного ввода и выводить для каждого уникального слова в этой строке 
число его повторений (без учёта регистра) в формате "слово количество" (см. пример вывода).
Порядок вывода слов может быть произвольным, каждое уникальное слово должно выводиться только один раз."""

lt = [i.lower() for i in input().split()]
st = list(set(lt))
count = 0
for i in range(len(st)):
  for j in range(len(lt)):
    if st[i] == lt[j]:
      count += 1
  print(st[i], count)
  count = 0

"""Напишите программу, которая считывает из файла строку, соответствующую тексту, сжатому с помощью кодирования повторов, 
и производит обратную операцию, получая исходный текст.
Запишите полученный текст в файл и прикрепите его, как ответ на это задание.
В исходном тексте не встречаются цифры, так что код однозначно интерпретируем."""

with open('dataset_3363_2 (1).txt', 'r') as file1, open('text.txt', 'w') as file2:
  str = file1.read()
  for i in range(len(str) - 1):
    x = i
    number = ''
    while x < len(str) - 1 and str[x + 1].isdigit():
      number += str[x + 1]
      x += 1
    if str[i].isalpha():
      file2.write(str[i] * int(number))
      
"""Напишите программу, которая считывает текст из файла (в файле может быть больше одной строки) и выводит самое частое слово в этом тексте и через пробел то,
сколько раз оно встретилось. Если таких слов несколько, вывести лексикографически первое (можно использовать оператор < для строк).
Слова, написанные в разных регистрах, считаются одинаковыми."""

with open('dataset_3363_3.txt', 'r') as file1, open('text.txt', 'w') as file2:
    var = file1.read().lower().split()
    word = ''
    count = 0
    for i in set(var):
        if var.count(i) > count:
            word = i
            count = var.count(i)
        elif var.count(i) == count:
            if i < word:
                word = i
    file2.write(word + " " + str(count))
    
"""Имеется файл с данными по успеваемости абитуриентов. Он представляет из себя набор строк, где в каждой строке записана следующая информация:
Фамилия;Оценка_по_математике;Оценка_по_физике;Оценка_по_русскому_языку
Поля внутри строки разделены точкой с запятой, оценки — целые числа.
Напишите программу, которая считывает исходный файл с подобной структурой и для каждого абитуриента
записывает его среднюю оценку по трём предметам на отдельной строке,соответствующей этому абитуриенту, в файл с ответом.
Также вычислите средние баллы по математике, физике и русскому языку по всем абитуриентам и добавьте полученные значения,
разделённые пробелом, последней строкой в файл с ответом.
В качестве ответа на задание прикрепите полученный файл со средними оценками по каждому ученику и одной строкой со средними оценками по трём предметам."""

with open('dataset_3363_4.txt', 'r', encoding='utf-8') as file1, open('text.txt', 'w') as file2:
    math, phis, rus, count = 0, 0, 0, 0
    for i in file1.readlines():
        sum = 0
        var = i.split(';')
        count += 1
        for j in range(1, len(var)):
            sum += int(var[j])
            if j == 1:
                math += int(var[j])
            if j == 2:
                phis += int(var[j])
            if j == 3:
                rus += int(var[j])
        print(sum / 3)
    print(math / count, phis / count, rus / count)

"""Имеется набор файлов, каждый из которых, кроме последнего, содержит имя следующего файла.
Первое слово в тексте последнего файла: "We".
Скачайте предложенный файл. В нём содержится ссылка на первый файл из этого набора.
Все файлы располагаются в каталоге по адресу:
https://stepic.org/media/attachments/course67/3.6.3/
Загрузите содержимое последнего файла из набора, как ответ на это задание."""

import requests
info = requests.get('https://stepic.org/media/attachments/course67/3.6.3/699991.txt')
while 'we' not in info.text:
    info = requests.get('https://stepic.org/media/attachments/course67/3.6.3/' + info.text)
    print(info.text)

"""Простейшая система проверки орфографии может быть основана на использовании списка известных слов.
Если введённое слово не найдено в этом списке, оно помечается как "ошибка". Попробуем написать подобную систему.
На вход программе первой строкой передаётся количество dd известных нам слов, после чего на dd строках указываются эти слова.
Затем передаётся количество ll строк текста для проверки, после чего ll строк текста.
Выведите уникальные "ошибки" в произвольном порядке. Работу производите без учёта регистра."""

f = int(input())
right = [input().lower() for i in range(f)]
s = int(input())
checking = [input().lower() for i in range(s)]
mistakes = set()
for i in range(len(checking)):
    line = checking[i].split()
    for j in range(len(line)):
        if line[j] not in right:
            mistakes.add(line[j])
for i in mistakes:
    print(i)

"""Дан файл с таблицей в формате TSV с информацией о росте школьников разных классов.
Напишите программу, которая прочитает этот файл и подсчитает для каждого класса средний рост учащегося.
Файл состоит из набора строк, каждая из которых представляет собой три поля:
Класс Фамилия Рост
Класс обозначается только числом. Буквенные модификаторы не используются. Номер класса может быть от 1 до 11 включительно. 
В фамилии нет пробелов, а в качестве роста используется натуральное число, но при подсчёте среднего требуется вычислить значение в виде вещественного числа.
Выводить информацию о среднем росте следует в порядке возрастания номера класса (для классов с первого по одиннадцатый).
Если про какой-то класс нет информации, необходимо вывести напротив него прочерк."""

grades = {}
with open('dataset_3380_5.txt', 'r') as file:
    for i in file.readlines():
        line = i.split()
        if line[0] not in grades.keys():
            grades[line[0]] = [int(line[2]), 1]
        else:
            grades[line[0]][0] += int(line[2])
            grades[line[0]][1] += 1
for i in range(1, 12):
    if str(i) in grades.keys():
        print(i, grades[str(i)][0] / grades[str(i)][1])
    else:
        print(i, '-')
