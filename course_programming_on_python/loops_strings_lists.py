""" Напишите программу, которая считывает с консоли числа (по одному в строке) до тех пор, пока сумма введённых чисел не будет равна 0
и сразу после этого выводит сумму квадратов всех считанных чисел.
Гарантируется, что в какой-то момент сумма введённых чисел окажется равной 0, после этого считывание продолжать не нужно.
В примере мы считываем числа 1, -3, 5, -6, -10, 13; в этот момент замечаем, что сумма этих чисел равна нулю и выводим сумму их квадратов,
не обращая внимания на то, что остались ещё не прочитанные значения. """

n = int(input())
sum = n
square = n*n
while sum != 0:
  n = int(input())
  sum += n
  square += n*n
print(square)

""" Напишите программу, которая выводит часть последовательности 1 2 2 3 3 3 4 4 4 4 5 5 5 5 5 ... (число повторяется столько раз, чему равно). 
На вход программе передаётся неотрицательное целое число n — столько элементов последовательности должна отобразить программа. 
На выходе ожидается последовательность чисел, записанных через пробел в одну строку.
Например, если n = 7, то программа должна вывести 1 2 2 3 3 3 4. """

n = int(input())
count = 0
for i in range(1, n + 1):
  for j in range(i):
    if count != n:
      count += 1
      print(i, end=' ')
        
""" Напишите программу, которая считывает список чисел lstlst из первой строки и число xx из второй строки, 
которая выводит все позиции, на которых встречается число xx в переданном списке lstlst.
Позиции нумеруются с нуля, если число xx не встречается в списке, вывести строку "Отсутствует" (без кавычек, с большой буквы).
Позиции должны быть выведены в одну строку, по возрастанию абсолютного значения. """

lst = [int(i) for i in input().split()]
n = int(input())
if n not in lst:
  print('Отсутствует')
for i in range(len(lst)):
  if lst[i] == n:
    print(i, end=' ')
    
""" Напишите программу, на вход которой подаётся прямоугольная матрица в виде последовательности строк. 
После последней строки матрицы идёт строка, содержащая только строку "end" (без кавычек, см. Sample Input).
Программа должна вывести матрицу того же размера, у которой каждый элемент в позиции i, j равен сумме элементов первой матрицы на позициях 
(i-1, j), (i+1, j), (i, j-1), (i, j+1). У крайних символов соседний элемент находится с противоположной стороны матрицы.
В случае одной строки/столбца элемент сам себе является соседом по соответствующему направлению. """

lst = input()
a = []
while lst != 'end':
    a.append([int(i) for i in lst.split()])
    lst = input()

for i in range(len(a)):
      for j in range(len(a[i])):
        print(a[i-1][j] + a[(i+1)%len(a)][j] + a[i][j-1] + a[i][(j+1)%len(a[i])], end=' ')
      print()

""" Выведите таблицу размером n×n, заполненную числами от 1 до n^2 по спирали, 
выходящей из левого верхнего угла и закрученной по часовой стрелке, как показано в примере (здесь n=5): """

n = int(input())
arr = []
size = n
count = 1

arr = [[0 for j in range(n)] for i in range(n)]
for i in range(size):
  for j in range(i, size):
    arr[i][j] = count
    count += 1
  for j in range(i + 1, size):
    arr[j][size - 1] = count
    count += 1
  for j in range(size - 2, i, -1):
    arr[size - 1][j] = count
    count += 1
  for j in range(size - 1, i, -1):
    arr[j][i] = count
    count += 1
  size -= 1

for i in range(n):
  for j in range(n):
    print(arr[i][j], end=' ')
  print()
